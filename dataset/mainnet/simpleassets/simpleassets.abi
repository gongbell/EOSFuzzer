{"abi_extensions": [], "actions": [{"name": "attach", "ricardian_contract": "## ACTION NAME: attach\n\n\t### INTENT\n\t\tAttach other NFTs to the specified NFT. Restrictions:\n\t\t1. Only the Asset Author can do this\n\t\t2. All assets must have the same author\n\t\t3. All assets much have the same owner\n\n\t### Input parameters:\n\t\t`owner`\t   - owner of NFTs\n\t\t`assetidc` - id of container NFT\n\t\t`assetids` - array of asset ids to attach\t\n\n\t\n\t### TERM\n\tThis Contract expires at the conclusion of code execution.\n\n\tby CryptoLions [ https://cryptolions.io ]", "type": "attach"}, {"name": "attachf", "ricardian_contract": "## ACTION NAME: attachf\n\n\t### INTENT\n\tAttach FTs to the specified NFT. Restrictions:\n\t1. Only the Asset Author can do this\n\t2. All assets must have the same author\n\t3. All assets much have the same owner\n\n\t### Input parameters:\n\t`owner`\t   - owner of assets\n\t`author`   - author of the assets\n\t`assetidc` - id of container NFT\n\t`quantity` - quantity to attach and token name (for example: \"10 WOOD\", \"42.00 GOLD\")\n\t\n\t### TERM\n\tThis Contract expires at the conclusion of code execution.\n\n\tby CryptoLions [ https://cryptolions.io ]", "type": "attachf"}, {"name": "authorupdate", "ricardian_contract": "## ACTION NAME: authorupdate\n\n\t### INTENT\n\tAuthors info update. Used to updated author information, and asset display recommendations created with the regauthor action. This action replaces the fields data and stemplate.\n\n\tTo remove author entry, call this action with null strings for data and stemplate.\n\n\t### Input parameters:\n\t`author`      - authors account who will create assets; \n\t`data`        - stringified json. Recommendations to include: game, company, logo, url, desc;\n\t`stemplate`   - stringified json with key:state values, where key is key from mdata or idata and \n\t\t\t\t\tstate indicates recommended way of displaying field: \n\t\t\t\t\turl, img, webgl, mp3, video, hide (ie. don't display), etc.\n\n\t### TERM\n\tThis Contract expires at the conclusion of code execution.\n\n\tby CryptoLions [ https://cryptolions.io ]", "type": "authorupdate"}, {"name": "burn", "ricardian_contract": "## ACTION NAME: burn\n\n\t### INTENT\n\tBurns asset {{assetid}}. This action is only available for the asset owner. After executing, the \n\tasset will disappear forever, and RAM used for asset will be released.\n\n\t### Input parameters:\n\t`owner`    - current asset owner account;\n\t`assetids` - array of assetid's to burn;\n\t`memo`     - memo for burn action;\n\n\t### TERM\n\tThis Contract expires at the conclusion of code execution.\n\n\tby CryptoLions [ https://cryptolions.io ]", "type": "burn"}, {"name": "burnf", "ricardian_contract": "## ACTION NAME: burnf\n\n\t### INTENT\n\tBurns a fungible token. This action is available for the token owner and author. After executing, \n\taccounts balance and supply in stats table for this token will reduce by the specified quantity.\n\n\t### Input parameters:\n\t`from`     - account who burns the token;\n\t`author`   - account of fungible token author;\n\t`quantity` - amount to burn, example \"1.00 WOOD\";\n\t`memo`     - memo for burnf action;\n\n\t### TERM\n\tThis Contract expires at the conclusion of code execution.\n\n\tby CryptoLions [ https://cryptolions.io ]", "type": "burnf"}, {"name": "canceloffer", "ricardian_contract": "## ACTION NAME: canceloffer\n\n\t### INTENT\n\tCancel and remove offer. Available for the asset owner.\n\n\t### Input parameters:\n\t`owner`    - current asset owner account;\n\t`assetids` - array of assetid's to cancel offer;\n\n\t### TERM\n\tThis Contract expires at the conclusion of code execution.\n\n\tby CryptoLions [ https://cryptolions.io ]", "type": "canceloffer"}, {"name": "cancelofferf", "ricardian_contract": "## ACTION NAME: cancelofferf\n\n\t### INTENT\n\tCancels offer of FTs\n\n\t### Input parameters:\n\t`owner`      - riginal owner of the FT\n\t`ftofferids` - id of the FT offer\n\t\n\t### TERM\n\tThis Contract expires at the conclusion of code execution.\n\n\tby CryptoLions [ https://cryptolions.io ]", "type": "cancelofferf"}, {"name": "claim", "ricardian_contract": "## ACTION NAME: claim\n\n\t### INTENT\n\tClaim the specified asset (assuming it was offered to claimer by the asset owner).\n\n\t### Input parameters:\n\t`claimer`  - account claiming the asset\n\t`assetids` - array of assetid's to claim\n\n\t### TERM\n\tThis Contract expires at the conclusion of code execution.\n\n\tby CryptoLions [ https://cryptolions.io ]", "type": "claim"}, {"name": "claimf", "ricardian_contract": "## ACTION NAME: claimf\n\n\t### INTENT\n\tClaim FTs which have been offered\n\n\t### Input parameters:\n\t`claimer`    - Account claiming FTs which have been offered\n\t`ftofferids` - array of FT offer ids\n\t\n\t### TERM\n\tThis Contract expires at the conclusion of code execution.\n\n\tby CryptoLions [ https://cryptolions.io ]", "type": "claimf"}, {"name": "closef", "ricardian_contract": "## ACTION NAME: closef\n\n\t### INTENT\n\tCloses accounts table for provided fungible token and releases RAM.\n\tAction works only if balance is 0;\n\n\t### Input parameters:\n\t`owner`  - account who woud like to close table with fungible token;\n\t`author` - account of fungible token author;\n\t`symbol` - token symbol, example \"WOOD\", \"ROCK\", \"GOLD\";\n\n\t### TERM\n\tThis Contract expires at the conclusion of code execution.\n\n\tby CryptoLions [ https://cryptolions.io ]", "type": "closef"}, {"name": "create", "ricardian_contract": "## ACTION NAME: create\n\n\t### INTENT\n\t\u0421reate a new asset.\n\n\t### Input parameters:\n\t`author`         - asset's author, who will able to updated asset's mdata;\n\t`category`       - assets category;\n\t`owner`          - assets owner;\n\t`idata`          - stringified json with immutable assets data\n\t`mdata`          - stringified json with mutable assets data, can be changed only by author\n\t`requireclaim`   - true or false. If disabled, upon creation, the asset will be transfered to owner (but \n\t\t\t\t\t   but AUTHOR'S memory will be used until the asset is transferred again).  If enabled,\n\t\t\t\t\t   author will remain the owner, but an offer will be created for the account specified in \n\t\t\t\t\t   the owner field to claim the asset using the account's RAM.\n\n\t### TERM\n\tThis Contract expires at the conclusion of code execution.\n\n\tby CryptoLions [ https://cryptolions.io ]", "type": "create"}, {"name": "createf", "ricardian_contract": "## ACTION NAME: createf\n\n\t### INTENT\n\tCreates fungible token with specified maximum supply; You can not change anything after creation.\n\n\t### Input parameters:\n\t`author`         - fungible token author;\n\t`maximum_supply` - maximum token supply, example \"10000000.0000 GOLD\", \"10000000 SEED\", \"100000000.00 WOOD\". Precision is also important here;\n\t`authorctrl`     - if true(1) allow token author (and not just owner) to burnf and transferf. Cannot be changed after creation!\n\t`data`           - stringify json (recommend including keys `img` and `name` for better displaying by markets)\n\t\n\t### TERM\n\tThis Contract expires at the conclusion of code execution.\n\n\tby CryptoLions [ https://cryptolions.io ]", "type": "createf"}, {"name": "createlog", "ricardian_contract": "## ACTION NAME: createlog (internal)", "type": "createlog"}, {"name": "delegate", "ricardian_contract": "## ACTION NAME: delegate\n\n\t### INTENT\n\tDelegates asset to {{to}}. This action changes the asset owner by calling the transfer action.\n\tIt also adds a record in the delegates table to record the asset as borrowed.  This blocks\n\tthe asset from all owner actions (transfers, offers, burning by borrower).\n\n\t### Input parameters:\n\t`owner`     - current asset owner account;\n\t`to`        - borrower account name;\n\t`assetids`  - array of assetid's to delegate;\n\t`period`    - time in seconds that the asset will be lent. Lender cannot undelegate until \n\t\t\t\t  the period expires, however the receiver can transfer back at any time.\n\t`memo`      - memo for delegate action\n\n\t### TERM\n\tThis Contract expires at the conclusion of code execution.\n\n\tby CryptoLions [ https://cryptolions.io ]", "type": "delegate"}, {"name": "detach", "ricardian_contract": "## ACTION NAME: detach\n\n\t### INTENT\n\tDetach NFTs from the specified NFT.\n\n\t### Input parameters:\n\t`owner`    - owner of NFTs\n\t`assetidc` - the id of the NFT from which we are detaching\n\t`assetids` - the ids of the NFTS to be detached\n\t\n\t### TERM\n\tThis Contract expires at the conclusion of code execution.\n\n\tby CryptoLions [ https://cryptolions.io ]", "type": "detach"}, {"name": "detachf", "ricardian_contract": "## ACTION NAME: detachf\n\n\t### INTENT\n\tDetach FTs from the specified NFT.\n\n\t### Input parameters:\n\t`owner`    - owner of NFTs\n\t`author`   - author of the assets\n\t`assetidc` - id of the container NFT\n\t`quantity` - quantity to detach and token name (for example: \"10 WOOD\", \"42.00 GOLD\")\n\t\n\t### TERM\n\tThis Contract expires at the conclusion of code execution.\n\n\tby CryptoLions [ https://cryptolions.io ]", "type": "detachf"}, {"name": "issuef", "ricardian_contract": "## ACTION NAME: issuef\n\n\t### INTENT\n\tThis action issues a fungible token.\t\t\n\n\t### Input parameters:\n\t`to`       - account receiver;\n\t`author`   - fungible token author;\n\t`quantity` - amount to issue, example \"1000.00 WOOD\";\n\t`memo`     - transfers memo;\n\n\t### TERM\n\tThis Contract expires at the conclusion of code execution.\n\n\tby CryptoLions [ https://cryptolions.io ]", "type": "issuef"}, {"name": "offer", "ricardian_contract": "## ACTION NAME: offer\n\n\t### INTENT\n\tOffer asset for claim. This is an alternative to the transfer action. Offer can be used by an \n\tasset owner to transfer the asset without using their RAM. After an offer is made, the account\n\tspecified in {{newowner}} is able to make a claim, and take control of the asset using their RAM.\n\tOffer action is not available if an asste is delegated (borrowed).\n\n\t### Input parameters:\n\t`owner`    - current asset owner account;\n\t`newowner` - new asset owner, who will able to claim;\n\t`assetids` - array of assetid's to offer;\n\t`memo`     - memo for offer action\n\n\t### TERM\n\tThis Contract expires at the conclusion of code execution.\n\n\tby CryptoLions [ https://cryptolions.io ]", "type": "offer"}, {"name": "offerf", "ricardian_contract": "## ACTION NAME: offerf\n\n\t### INTENT\n\tOffer fungible tokens for another EOS user to claim. \n\tThis is an alternative to the transfer action. Offer can be used by a \n\tFT owner to transfer the FTs without using their RAM. After an offer is made, the account\n\tspecified in {{newowner}} is able to make a claim, and take control of the asset using their RAM.\n\tFTs will be removed from the owner's balance while the offer is open.\n\n\t### Input parameters:\n\t`owner`    - original owner of the FTs\n\t`newowner` - account which will be able to claim the offer\n\t`author`   - account of fungible token author;\t\n\t`quantity` - amount to transfer, example \"1.00 WOOD\";\n\t`memo`     - offer's comment;\n\t\n\t### TERM\n\tThis Contract expires at the conclusion of code execution.\n\n\tby CryptoLions [ https://cryptolions.io ]", "type": "offerf"}, {"name": "openf", "ricardian_contract": "## ACTION NAME: openf\n\n\t### INTENT\n\tOpens accounts table for specified fungible token.\n\n\t### Input parameters:\n\t`owner`     - account who woud like to close table with fungible token;\n\t`author`    - account of fungible token author;\n\t`symbol`    - token symbol, example \"WOOD\", \"ROCK\", \"GOLD\";\n\t`ram_payer` - account who will pay for ram used for table creation;\n\n\t### TERM\n\tThis Contract expires at the conclusion of code execution.\n\n\tby CryptoLions [ https://cryptolions.io ]", "type": "openf"}, {"name": "regauthor", "ricardian_contract": "## ACTION NAME: regauthor\n\n\t### INTENT\n\tNew Author registration. Action is not mandatory.  Markets *may* choose to use information here \n\tto display info about the author, and to follow specifications expressed here for displaying asset fields.\n\n\t### Input parameters:\n\t`author`      -\tauthors account who will create assets;\n\t`data`        - stringified json. Recommendations to include: game, company, logo, url, desc;\n\t`stemplate`   - stringified json with key:state values, where key is key from mdata or idata and \n\t\t\t\t\tstate indicates recommended way of displaying field: \n\t\t\t\t\turl, img, webgl, mp3, video, hide (ie. don't display), etc.\n\n\t### TERM\n\tThis Contract expires at the conclusion of code execution.\n\n\tby CryptoLions [ https://cryptolions.io ]", "type": "regauthor"}, {"name": "transfer", "ricardian_contract": "## ACTION NAME: transfer\n\n\t### INTENT\n\tThis actions transfers an asset. On transfer owner asset's and scope asset's changes to {{to}}'s.\n\tSenders RAM will be charged to transfer asset.\n\tTransfer will fail if asset is offered for claim or is delegated.\n\n\t### Input parameters:\n\t`from`     - account who sends the asset;\n\t`to`       - account of receiver;\n\t`assetids` - array of assetid's to transfer;\n\t`memo`     - transfers comment;\n\n\t### TERM\n\tThis Contract expires at the conclusion of code execution.\n\n\tby CryptoLions [ https://cryptolions.io ]", "type": "transfer"}, {"name": "transferf", "ricardian_contract": "## ACTION NAME: transferf\n\tThis actions transfers an fungible token.\n\n\t### INTENT\n\tThis actions transfers a specified quantity of fungible tokens.\n\n\t### Input parameters:\n\t`from`     - account who sends the token;\n\t`to`       - account of receiver;\n\t`author`   - account of fungible token author;\n\t`quantity` - amount to transfer, example \"1.00 WOOD\";\n\t`memo`     - transfers comment;\n\n\t### TERM\n\tThis Contract expires at the conclusion of code execution.\n\n\tby CryptoLions [ https://cryptolions.io ]", "type": "transferf"}, {"name": "undelegate", "ricardian_contract": "## ACTION NAME: undelegate\n\n\t### INTENT\n\tUndelegates an asset from {{from}} account. Executing action by real owner will return asset immediately,\n\tand the entry in the delegates table recording the borrowing will be erased.\n\n\t### Input parameters:\n\t`owner`    - real asset owner account;\n\t`from`     - current account owner (borrower);\n\t`assetids` - array of assetid's to undelegate;\n\n\t### TERM\n\tThis Contract expires at the conclusion of code execution.\n\n\tby CryptoLions [ https://cryptolions.io ]", "type": "undelegate"}, {"name": "update", "ricardian_contract": "## ACTION NAME: update\n\n\t### INTENT\n\tUpdate assets mutable data (mdata) field. Action is available only for authors.\n\n\t### Input parameters:\n\t`author`  - authors account;\n\t`owner`   - current assets owner;\n\t`assetid` - assetid to update;\n\t`mdata`   - stringified json with mutable assets data. All mdata will be replaced;\n\n\t### TERM\n\tThis Contract expires at the conclusion of code execution.\n\n\tby CryptoLions [ https://cryptolions.io ]", "type": "update"}, {"name": "updatef", "ricardian_contract": "## ACTION NAME: updatef\n\n\t### INTENT\n\tUpdate the data field of a fungible token.\n\n\t### Input parameters:\n\t`author` - fungible token author;\n\t`sym`    - fingible token symbol (\"GOLD\", \"WOOD\", etc.)\n\t`data`   - stringify json (recommend including keys `img` and `name` for better displaying by markets)\n\t\n\t### TERM\n\tThis Contract expires at the conclusion of code execution.\n\n\tby CryptoLions [ https://cryptolions.io ]", "type": "updatef"}, {"name": "updatever", "ricardian_contract": "## ACTION NAME: updatever (internal)", "type": "updatever"}], "error_messages": [], "ricardian_clauses": [{"body": "The invoker of the contract action shall uphold its Obligations under this Contract in a timely and workmanlike manner, using knowledge and recommendations for performing the services which meet generally acceptable standards set forth by EOS.IO Blockchain Block Producers.", "id": "Warranty"}, {"body": "The occurrence of any of the following shall constitute a material default under this Contract:", "id": "Default"}, {"body": "In addition to any and all other rights a party may have available according to law, if a party defaults by failing to substantially perform any provision, term or condition of this Contract, the other party may terminate the Contract by providing written notice to the defaulting party. This notice shall describe with sufficient detail the nature of the default. The party receiving such notice shall promptly be removed from being a Block Producer and this Contract shall be automatically terminated.", "id": "Remedies"}, {"body": "If performance of this Contract or any obligation under this Contract is prevented, restricted, or interfered with by causes beyond either party's reasonable control (\"Force Majeure\"), and if the party unable to carry out its obligations gives the other party prompt written notice of such event, then the obligations of the party invoking this provision shall be suspended to the extent necessary by such event. The term Force Majeure shall include, without limitation, acts of God, fire, explosion, vandalism, storm or other similar occurrence, orders or acts of military or civil authority, or by national emergencies, insurrections, riots, or wars, or strikes, lock-outs, work stoppages, or supplier failures. The excused party shall use reasonable efforts under the circumstances to avoid or remove such causes of non-performance and shall proceed to perform with reasonable dispatch whenever such causes are removed or ceased. An act or omission shall be deemed within the reasonable control of a party if committed, omitted, or caused by such party, or its employees, officers, agents, or affiliates.", "id": "ForceMajeure"}, {"body": "Any controversies or disputes arising out of or relating to this Contract will be resolved by binding arbitration under the default rules set forth by the EOS.IO Blockchain. The arbitrator's award will be final, and judgment may be entered upon it by any court having proper jurisdiction.", "id": "DisputeResolution"}, {"body": "This Contract contains the entire agreement of the parties, and there are no other promises or conditions in any other agreement whether oral or written concerning the subject matter of this Contract. This Contract supersedes any prior written or oral agreements between the parties.", "id": "EntireAgreement"}, {"body": "If any provision of this Contract will be held to be invalid or unenforceable for any reason, the remaining provisions will continue to be valid and enforceable. If a court finds that any provision of this Contract is invalid or unenforceable, but that by limiting such provision it would become valid and enforceable, then such provision will be deemed to be written, construed, and enforced as so limited.", "id": "Severability"}, {"body": "This Contract may be modified or amended in writing by mutual agreement between the parties, if the writing is signed by the party obligated under the amendment.", "id": "Amendment"}, {"body": "This Contract shall be construed in accordance with the Maxims of Equity.", "id": "GoverningLaw"}, {"body": "Any notice or communication required or permitted under this Contract shall be sufficiently given if delivered to a verifiable email address or to such other email address as one party may have publicly furnished in writing, or published on a broadcast contract provided by this blockchain for purposes of providing notices of this type.", "id": "Notice"}, {"body": "The failure of either party to enforce any provision of this Contract shall not be construed as a waiver or limitation of that party's right to subsequently enforce and compel strict compliance with every provision of this Contract.", "id": "WaiverOfContractualRight"}, {"body": "In any action arising hereunder or any separate action pertaining to the validity of this Agreement, both sides shall pay half the initial cost of arbitration, and the prevailing party shall be awarded reasonable arbitrator's fees and costs.", "id": "ArbitratorsFees_"}, {"body": "The rule requiring construction or interpretation against the drafter is waived. The document shall be deemed as if it were drafted by both parties in a mutual effort.", "id": "ConstructionAndInterpretation"}, {"body": "In witness whereof, the parties hereto have caused this Agreement to be executed by themselves or their duly authorized representatives as of the date of execution, and authorized as proven by the cryptographic signature on the transaction that invokes this contract.", "id": "InWitnessWhereof"}], "structs": [{"base": "", "fields": [{"name": "id", "type": "uint64"}, {"name": "author", "type": "name"}, {"name": "balance", "type": "asset"}], "name": "account"}, {"base": "", "fields": [{"name": "owner", "type": "name"}, {"name": "assetidc", "type": "uint64"}, {"name": "assetids", "type": "uint64[]"}], "name": "attach"}, {"base": "", "fields": [{"name": "owner", "type": "name"}, {"name": "author", "type": "name"}, {"name": "quantity", "type": "asset"}, {"name": "assetidc", "type": "uint64"}], "name": "attachf"}, {"base": "", "fields": [{"name": "author", "type": "name"}, {"name": "data", "type": "string"}, {"name": "stemplate", "type": "string"}], "name": "authorupdate"}, {"base": "", "fields": [{"name": "owner", "type": "name"}, {"name": "assetids", "type": "uint64[]"}, {"name": "memo", "type": "string"}], "name": "burn"}, {"base": "", "fields": [{"name": "from", "type": "name"}, {"name": "author", "type": "name"}, {"name": "quantity", "type": "asset"}, {"name": "memo", "type": "string"}], "name": "burnf"}, {"base": "", "fields": [{"name": "owner", "type": "name"}, {"name": "assetids", "type": "uint64[]"}], "name": "canceloffer"}, {"base": "", "fields": [{"name": "owner", "type": "name"}, {"name": "ftofferids", "type": "uint64[]"}], "name": "cancelofferf"}, {"base": "", "fields": [{"name": "claimer", "type": "name"}, {"name": "assetids", "type": "uint64[]"}], "name": "claim"}, {"base": "", "fields": [{"name": "claimer", "type": "name"}, {"name": "ftofferids", "type": "uint64[]"}], "name": "claimf"}, {"base": "", "fields": [{"name": "owner", "type": "name"}, {"name": "author", "type": "name"}, {"name": "symbol", "type": "symbol"}], "name": "closef"}, {"base": "", "fields": [{"name": "author", "type": "name"}, {"name": "category", "type": "name"}, {"name": "owner", "type": "name"}, {"name": "idata", "type": "string"}, {"name": "mdata", "type": "string"}, {"name": "requireclaim", "type": "bool"}], "name": "create"}, {"base": "", "fields": [{"name": "author", "type": "name"}, {"name": "maximum_supply", "type": "asset"}, {"name": "authorctrl", "type": "bool"}, {"name": "data", "type": "string"}], "name": "createf"}, {"base": "", "fields": [{"name": "author", "type": "name"}, {"name": "category", "type": "name"}, {"name": "owner", "type": "name"}, {"name": "idata", "type": "string"}, {"name": "mdata", "type": "string"}, {"name": "assetid", "type": "uint64"}, {"name": "requireclaim", "type": "bool"}], "name": "createlog"}, {"base": "", "fields": [{"name": "supply", "type": "asset"}, {"name": "max_supply", "type": "asset"}, {"name": "issuer", "type": "name"}, {"name": "id", "type": "uint64"}, {"name": "authorctrl", "type": "bool"}, {"name": "data", "type": "string"}], "name": "currency_stats"}, {"base": "", "fields": [{"name": "owner", "type": "name"}, {"name": "to", "type": "name"}, {"name": "assetids", "type": "uint64[]"}, {"name": "period", "type": "uint64"}, {"name": "memo", "type": "string"}], "name": "delegate"}, {"base": "", "fields": [{"name": "owner", "type": "name"}, {"name": "assetidc", "type": "uint64"}, {"name": "assetids", "type": "uint64[]"}], "name": "detach"}, {"base": "", "fields": [{"name": "owner", "type": "name"}, {"name": "author", "type": "name"}, {"name": "quantity", "type": "asset"}, {"name": "assetidc", "type": "uint64"}], "name": "detachf"}, {"base": "", "fields": [{"name": "lnftid", "type": "uint64"}, {"name": "defid", "type": "uint64"}, {"name": "spare1", "type": "uint64"}, {"name": "spare2", "type": "uint64"}], "name": "global"}, {"base": "", "fields": [{"name": "to", "type": "name"}, {"name": "author", "type": "name"}, {"name": "quantity", "type": "asset"}, {"name": "memo", "type": "string"}], "name": "issuef"}, {"base": "", "fields": [{"name": "owner", "type": "name"}, {"name": "newowner", "type": "name"}, {"name": "assetids", "type": "uint64[]"}, {"name": "memo", "type": "string"}], "name": "offer"}, {"base": "", "fields": [{"name": "owner", "type": "name"}, {"name": "newowner", "type": "name"}, {"name": "author", "type": "name"}, {"name": "quantity", "type": "asset"}, {"name": "memo", "type": "string"}], "name": "offerf"}, {"base": "", "fields": [{"name": "owner", "type": "name"}, {"name": "author", "type": "name"}, {"name": "symbol", "type": "symbol"}, {"name": "ram_payer", "type": "name"}], "name": "openf"}, {"base": "", "fields": [{"name": "author", "type": "name"}, {"name": "data", "type": "string"}, {"name": "stemplate", "type": "string"}], "name": "regauthor"}, {"base": "", "fields": [{"name": "id", "type": "uint64"}, {"name": "owner", "type": "name"}, {"name": "author", "type": "name"}, {"name": "category", "type": "name"}, {"name": "idata", "type": "string"}, {"name": "mdata", "type": "string"}, {"name": "container", "type": "sasset[]"}, {"name": "containerf", "type": "account[]"}], "name": "sasset"}, {"base": "", "fields": [{"name": "author", "type": "name"}, {"name": "data", "type": "string"}, {"name": "stemplate", "type": "string"}], "name": "sauthor"}, {"base": "", "fields": [{"name": "assetid", "type": "uint64"}, {"name": "owner", "type": "name"}, {"name": "delegatedto", "type": "name"}, {"name": "cdate", "type": "uint64"}, {"name": "period", "type": "uint64"}], "name": "sdelegate"}, {"base": "", "fields": [{"name": "assetid", "type": "uint64"}, {"name": "owner", "type": "name"}, {"name": "offeredto", "type": "name"}, {"name": "cdate", "type": "uint64"}], "name": "soffer"}, {"base": "", "fields": [{"name": "id", "type": "uint64"}, {"name": "author", "type": "name"}, {"name": "owner", "type": "name"}, {"name": "quantity", "type": "asset"}, {"name": "offeredto", "type": "name"}, {"name": "cdate", "type": "uint64"}], "name": "sofferf"}, {"base": "", "fields": [{"name": "standard", "type": "name"}, {"name": "version", "type": "string"}], "name": "tokenconfigs"}, {"base": "", "fields": [{"name": "from", "type": "name"}, {"name": "to", "type": "name"}, {"name": "assetids", "type": "uint64[]"}, {"name": "memo", "type": "string"}], "name": "transfer"}, {"base": "", "fields": [{"name": "from", "type": "name"}, {"name": "to", "type": "name"}, {"name": "author", "type": "name"}, {"name": "quantity", "type": "asset"}, {"name": "memo", "type": "string"}], "name": "transferf"}, {"base": "", "fields": [{"name": "owner", "type": "name"}, {"name": "from", "type": "name"}, {"name": "assetids", "type": "uint64[]"}], "name": "undelegate"}, {"base": "", "fields": [{"name": "author", "type": "name"}, {"name": "owner", "type": "name"}, {"name": "assetid", "type": "uint64"}, {"name": "mdata", "type": "string"}], "name": "update"}, {"base": "", "fields": [{"name": "author", "type": "name"}, {"name": "sym", "type": "symbol"}, {"name": "data", "type": "string"}], "name": "updatef"}, {"base": "", "fields": [{"name": "version", "type": "string"}], "name": "updatever"}], "tables": [{"index_type": "i64", "key_names": [], "key_types": [], "name": "accounts", "type": "account"}, {"index_type": "i64", "key_names": [], "key_types": [], "name": "authors", "type": "sauthor"}, {"index_type": "i64", "key_names": [], "key_types": [], "name": "delegates", "type": "sdelegate"}, {"index_type": "i64", "key_names": [], "key_types": [], "name": "global", "type": "global"}, {"index_type": "i64", "key_names": [], "key_types": [], "name": "offerfs", "type": "sofferf"}, {"index_type": "i64", "key_names": [], "key_types": [], "name": "offers", "type": "soffer"}, {"index_type": "i64", "key_names": [], "key_types": [], "name": "sassets", "type": "sasset"}, {"index_type": "i64", "key_names": [], "key_types": [], "name": "stat", "type": "currency_stats"}, {"index_type": "i64", "key_names": [], "key_types": [], "name": "tokenconfigs", "type": "tokenconfigs"}], "types": [], "variants": [], "version": "eosio::abi/1.1"}