{"abi_extensions": [], "actions": [{"name": "moveseed", "ricardian_contract": "# CONTRACT FOR pvp::moveseed\n## ACTION NAME: moveseed\n### Parameters\nInput parameters:\n* account_name `caller` (name for further deffered transaction chain)* \n### Intent\nINTENT. The intention of the author and the invoker of this contract is to move current random seed. It can be called only by wizardrandom or wizardfights. It shall have no other effect.\n### Term\nTERM. This Contract expires at the conclusion of code execution.\n", "type": "moveseed"}, {"name": "proctransfer", "ricardian_contract": "", "type": "proctransfer"}, {"name": "regstrfight", "ricardian_contract": "# CONTRACT FOR pvp::regstrfight\n## ACTION NAME: regstrfight\n### Parameters\nInput parameters:\n* account_name `challenger` (name of battle caller) *\n* uint64_t `wizardId` (callers' wizard) *\n* account_name `target` (target account) *\n* uint64_t `targetWizardId` (target wizard id) *\n* asset `target_stake` (target stake) *\n* uint8_t `battle_type` (type of battle (DNA based / item based) *\n* uint32_t `salt` (salt for random) *\n### Intent\nINTENT. The intention of the author and the invoker of this contract is to create fight registration. This action should use in transaction with 2 action, where first transaction is transfer stake to wizardfights. Record about fight stores in the caller RAM. Fight info contains current snapshots of wizards genotype and phenotype (look at wizardstoken abi, table wizards), these snapshots will be used for fight (pvp::acceptfight). It shall have no other effect.\n### Term\nTERM. This Contract expires at the conclusion of code execution.\n", "type": "regstrfight"}, {"name": "handlereg", "ricardian_contract": "# CONTRACT FOR pvp::handlereg\n## ACTION NAME: handlereg\n### Parameters\nInput parameters:\n*fight `info` (info about fight registration)* \n### Intent\nINTENT. The intention of the author and the invoker of this contract is to collect statistic about registrated fight. Can be called only by wizardfights. It shall have no other effect.\n### Term\nTERM. This Contract expires at the conclusion of code execution.\n", "type": "handlereg"}, {"name": "createarena", "ricardian_contract": "# CONTRACT FOR pvp::createarena\n## ACTION NAME: createarena\n### Parameters\nInput parameters:\n* account_name `challenger` (caller to arena) *\n* uint64_t `wizardId` (id of wiz in arena) *\n* asset `target_stake` (stake) *\n* uint8_t `battle_type` (type of arena battle) *\n### Intent\nINTENT. The intention of the author and the invoker of this contract is to put wizard in arena. That action should be use in transaction, which contains first action with stake transfer.\n### Term\nTERM. This Contract expires at the conclusion of code execution.\n", "type": "createarena"}, {"name": "acceptfight", "ricardian_contract": "# CONTRACT FOR pvp::acceptfight\n## ACTION NAME: acceptfight\n### Parameters\nInput parameters:\n* uint64_t `fightid` (id of fight in ram of caller)* \n### Intent\nINTENT. The intention of the author and the invoker of this contract is to process fights between wizards. callerwizardid should be caller's, targetwizardis target's. This action should use in transaction with 2 action, where first transaction is transfer stake (should be >= than caller suggested) to wizardfights. Winner wizard owner get caller stake + target stake (target stake takes froom fight info and can be smaller then stake in current transaction). ``caller`` of that transaction agree with that difference between suggested stake and current stake goes to the wizardfights without as donate. That transaction starts action of tronsfering winner stake and ::payhononor (look at payhonor action). Info about cooldowns store in target's RAM. It shall have no other effect.\n### Term\nTERM. This Contract expires at the conclusion of code execution.\n", "type": "acceptfight"}, {"name": "acceptarena", "ricardian_contract": "# CONTRACT FOR pvp::acceptarena\n## ACTION NAME: acceptarena\n### Parameters\nInput parameters:\n* uint64_t `fighterWizId` (id of wizard, which CD should be removed)* \n* uint64_t `fightid` (id of fight to accept)*\n* account_name `target` (acc name of target)*\n* uint64_t `targetWizardId` (id of target)*\n### Intent\nINTENT. The intention of the author and the invoker of this contract is to accept arena fight. That action should be use in transaction, which contains first action with stake transfer.\n### Term\nTERM. This Contract expires at the conclusion of code execution.\n", "type": "acceptarena"}, {"name": "denyfight", "ricardian_contract": "# CONTRACT FOR pvp::denyfight\n## ACTION NAME: denyfight\n### Parameters\nInput parameters:\n* uint64_t `fightid` (id of denying fight)* \n### Intent\nINTENT. The intention of the author and the invoker of this contract is to reject fight suggestion and pay money back to caller. Fight info connected with `fightid` removes from caller RAM. It can be called only by fight target account, or current owner of targetwizid or wizardfights. It shall have no other effect.\n### Term\nTERM. This Contract expires at the conclusion of code execution.\n", "type": "denyfight"}, {"name": "cancelfight", "ricardian_contract": "# CONTRACT FOR pvp::cancelfight\n## ACTION NAME: cancelfight\n### Parameters\nInput parameters:\n* uint64_t `fightid` (id of cancelling fight)* \n### Intent\nINTENT. The intention of the author and the invoker of this contract is to cancel fight suggestion and pay money back to caller. Fight info connected with `fightid` removes from caller RAM. It can be called only by creator of owner of caller wizard or wizardfights. It shall have no other effect.\n### Term\nTERM. This Contract expires at the conclusion of code execution.\n", "type": "cancelfight"}, {"name": "payhonor", "ricardian_contract": "# CONTRACT FOR pvp::payhonor\n## ACTION NAME: payhonor\n### Parameters\nInput parameters:\n*uint16_t `tournament_id` (id of turnament, where battle was executed) *\n*account_name `winner` (winner acc name) *\n*uint64_t `win_wz_id` (id of winner wiz) *\n*account_name `loser` (loser acc name) *\n*uint64_t `los_wz_id` (loser wizard id) *\n*uint8_t `battle_type` (type of battle) *\n*uint64_t `battle_id` (id of battle) *\n*fight_log_s `p_log` (info about fight rounds) *\n### Intent\nINTENT. The intention of the author and the invoker of this contract is to collect statistic about fight, calculate honor points and give them to wizards. It can be called only by wizardfights. It shall have no other effect.\n### Term\nTERM. This Contract expires at the conclusion of code execution.\n", "type": "payhonor"}, {"name": "resetwizcd", "ricardian_contract": "# CONTRACT FOR pvp::resetwizcd\n## ACTION NAME: resetwizcd\n### Parameters\nInput parameters:\n* uint64_t `fighterWizId` (id of wizard, which CD should be removed)* \n### Intent\nINTENT. The intention of the author and the invoker of this contract is to remove wizard cooldown. That action should be use in transaction, which contains first action with stake transfer. Stake should be >= than 0.0001 EOS for each 6 seconds. If fighterWizId is on cooldown and payment is enough to remove it, cooldown for `fighterWizId` removes. It shall have no other effect.\n### Term\nTERM. This Contract expires at the conclusion of code execution.\n", "type": "resetwizcd"}, {"name": "checkwizcd", "ricardian_contract": "# CONTRACT FOR pvp::checkwizcd\n## ACTION NAME: checkwizcd\n### Parameters\nInput parameters:\n* uint64_t `fighterWizId` (id of wizard to check CD)* \n### Intent\nINTENT. The intention of the author and the invoker of this contract is to check that `fighterWizId` is on a cooldown. If cooldown ended, action succed and remove info about that cd from RAM. Otherwise it throws exception that \"there is X seconds more\" (if wizard is on a cooldown), or \"no cooldown\" (if wizard is not on cooldown). It shall have no other effect.\n### Term\nTERM. This Contract expires at the conclusion of code execution.\n", "type": "checkwizcd"}, {"name": "cleanwizcd", "ricardian_contract": "# CONTRACT FOR pvp::cleanwizcd\n## ACTION NAME: cleanwizcd\n### Parameters\nInput parameters:\n* uint16_t `itercount` (maximal count of records in cooldonws table that will be checked)* \n### Intent\nINTENT. The intention of the author and the invoker of this contract is to let anyone clean tables with cooldowns with ended cooldowns. It shall have no other effect.\n### Term\nTERM. This Contract expires at the conclusion of code execution.\n", "type": "cleanwizcd"}, {"name": "claimhonor", "ricardian_contract": "", "type": "claimhonor"}, {"name": "claimhpsids", "ricardian_contract": "", "type": "claimhpsids"}, {"name": "claimallhps", "ricardian_contract": "", "type": "claimallhps"}, {"name": "createtourn", "ricardian_contract": "", "type": "createtourn"}, {"name": "entertotourn", "ricardian_contract": "", "type": "entertotourn"}, {"name": "updatetourn", "ricardian_contract": "", "type": "updatetourn"}, {"name": "rmvwizfrmtrn", "ricardian_contract": "", "type": "rmvwizfrmtrn"}, {"name": "resdefbattrn", "ricardian_contract": "", "type": "resdefbattrn"}, {"name": "nexttrnbatl", "ricardian_contract": "", "type": "nexttrnbatl"}, {"name": "preptrnbatl", "ricardian_contract": "", "type": "preptrnbatl"}, {"name": "cleartrndata", "ricardian_contract": "", "type": "cleartrndata"}, {"name": "graztrnwinrs", "ricardian_contract": "", "type": "graztrnwinrs"}], "error_messages": [], "ricardian_clauses": [{"body": "AMENDMENT. This Contract may be expanded by the Developer of the smart contract in strict accordance with the letter and spirit of this Contract. \n\n\n\n", "id": "Amendment"}, {"body": "CONSTRUCTION AND INTERPRETATION. The rule requiring construction or interpretation against the drafter is waived. The document shall be deemed as if it were drafted by both parties in a mutual effort. \n  \n\n\n", "id": "Construction and Interpretation"}, {"body": "DISPUTE RESOLUTION. Any controversies or disputes arising out of or relating to this Contract will be resolved by binding arbitration under the default rules set forth by the EOS.IO Blockchain. The arbitrator's award will be final, and judgment may be entered upon it by any court having proper jurisdiction. \n  \n\n\n", "id": "Dispute Resolution"}, {"body": "ENTIRE AGREEMENT. This Contract contains the entire agreement of the parties, and there are no other promises or conditions in any other agreement whether oral or written concerning the subject matter of this Contract. This Contract supersedes any prior written or oral agreements between the parties. \n\n\n\n", "id": "Entire Agreement"}, {"body": "FORCE MAJEURE. If performance of this Contract or any obligation under this Contract is prevented, restricted, or interfered with by causes beyond either party's reasonable control (\"Force Majeure\"), and if the party unable to carry out its obligations gives the other party prompt written notice of such event, then the obligations of the party invoking this provision shall be suspended to the extent necessary by such event. The term Force Majeure shall include, without limitation, acts of God, fire, explosion, vandalism, storm or other similar occurrence, orders or acts of military or civil authority, or by national emergencies, insurrections, riots, or wars, or strikes, lock-outs, work stoppages, or supplier failures. The excused party shall use reasonable efforts under the circumstances to avoid or remove such causes of non-performance and shall proceed to perform with reasonable dispatch whenever such causes are removed or ceased. An act or omission shall be deemed within the reasonable control of a party if committed, omitted, or caused by such party, or its employees, officers, agents, or affiliates. \n  \n\n\n", "id": "Force Majeure"}, {"body": "GOVERNING LAW. This Contract shall be construed in accordance with the Maxims of Equity. \n\n\n\n", "id": "Governing Law"}, {"body": "NOTICE. Any notice or communication required or permitted under this Contract shall be sufficiently given if delivered to a verifiable email address or to such other email address as one party may have publicly furnished in writing, or published on a broadcast contract provided by this blockchain for purposes of providing notices of this type, or via a predetermined and publicly recognized and accessible channel including but not limited to official Telegram channel, Steem.it blog.\n\n\n\n", "id": "Notice"}, {"body": "SEVERABILITY. If any provision of this Contract will be held to be invalid or unenforceable for any reason, the remaining provisions will continue to be valid and enforceable. If a court finds that any provision of this Contract is invalid or unenforceable, but that by limiting such provision it would become valid and enforceable, then such provision will be deemed to be written, construed, and enforced as so limited. \n\n\n\n", "id": "Severability"}, {"body": "WAIVER OF CONTRACTUAL RIGHT. The failure of either party to enforce any provision of this Contract shall not be construed as a waiver or limitation of that party's right to subsequently enforce and compel strict compliance with every provision of this Contract. \n\n\n\n", "id": "Waiver of Contractual Right"}, {"body": "WARRANTY. The invoker of the contract action shall uphold its Obligations under this Contract in a timely and workmanlike manner, using knowledge and recommendations for performing the services which meet generally acceptable standards set forth by EOS.IO Blockchain Block Producers.\n\n\n\n", "id": "Warranty"}], "structs": [{"base": "", "fields": [{"name": "id", "type": "uint64"}, {"name": "genotype", "type": "uint8[]"}, {"name": "phenotype", "type": "uint8[]"}, {"name": "original_cost", "type": "asset"}], "name": "wizard"}, {"base": "", "fields": [{"name": "currid", "type": "uint64"}, {"name": "seed", "type": "uint32"}], "name": "state"}, {"base": "", "fields": [{"name": "trnsfid", "type": "uint64"}, {"name": "vals", "type": "uint64[]"}], "name": "nstate"}, {"base": "", "fields": [{"name": "id", "type": "uint64"}, {"name": "genotype", "type": "uint8[]"}, {"name": "phenotype", "type": "uint8[]"}], "name": "fight_wizard"}, {"base": "", "fields": [{"name": "wizard", "type": "fight_wizard"}, {"name": "owner", "type": "name"}], "name": "fighter"}, {"base": "", "fields": [{"name": "id", "type": "uint64"}, {"name": "fighter1", "type": "fighter"}, {"name": "fighter2", "type": "fighter"}, {"name": "result", "type": "uint8"}, {"name": "timestamp", "type": "uint64"}, {"name": "battle_type", "type": "uint8"}], "name": "basefight"}, {"base": "basefight", "fields": [{"name": "salt", "type": "uint32"}, {"name": "caller_stake", "type": "asset"}, {"name": "target_stake", "type": "asset"}], "name": "fight"}, {"base": "", "fields": [{"name": "id", "type": "uint64"}, {"name": "fighter_id", "type": "uint64"}, {"name": "freeAfter", "type": "uint64"}], "name": "fighter_cd"}, {"base": "", "fields": [{"name": "id_tourn", "type": "uint64"}, {"name": "wizint1_id", "type": "uint64"}, {"name": "wizint2_id", "type": "uint64"}, {"name": "level", "type": "uint8"}], "name": "tinfo"}, {"base": "", "fields": [{"name": "id_wiz", "type": "uint64"}, {"name": "hp_count", "type": "uint64"}, {"name": "expire_time", "type": "uint64"}], "name": "unclaimhp"}, {"base": "", "fields": [{"name": "id_wiz", "type": "uint64"}, {"name": "hp_count", "type": "uint64"}], "name": "honorpoint"}, {"base": "", "fields": [{"name": "time", "type": "uint64"}, {"name": "receiver", "type": "uint64"}, {"name": "code", "type": "uint64"}, {"name": "action", "type": "uint64"}], "name": "isserviced"}, {"base": "", "fields": [{"name": "id_transfer", "type": "uint64"}, {"name": "transfer_to", "type": "name"}, {"name": "quantity", "type": "asset"}, {"name": "memo", "type": "string"}], "name": "eostransf"}, {"base": "", "fields": [{"name": "hash", "type": "uint64"}], "name": "trnshash"}, {"base": "", "fields": [{"name": "tournid", "type": "uint64"}, {"name": "pplintid", "type": "uint64"}, {"name": "wizintid", "type": "uint64"}, {"name": "wizstid", "type": "uint64"}, {"name": "others", "type": "uint64[]"}], "name": "nextid"}, {"base": "", "fields": [{"name": "id_tourn", "type": "uint64"}, {"name": "tourn_name", "type": "string"}, {"name": "tourn_description", "type": "string"}, {"name": "creator", "type": "name"}, {"name": "start_reg_date", "type": "int64"}, {"name": "stop_reg_date", "type": "int64"}, {"name": "start_fight_date", "type": "int64"}, {"name": "players_count_to_start", "type": "int32"}, {"name": "finished_date", "type": "int64"}, {"name": "prize", "type": "asset"}, {"name": "prize_distribution", "type": "uint32[]"}, {"name": "enter_stake", "type": "asset"}, {"name": "fee_from_stake", "type": "uint8"}, {"name": "fe_too", "type": "name"}, {"name": "limits", "type": "uint64[]"}, {"name": "tourn_structure", "type": "uint32"}, {"name": "battle_delay", "type": "uint32"}, {"name": "battletype", "type": "uint32"}, {"name": "current_wiz_count", "type": "uint64"}, {"name": "current_players_count", "type": "uint64"}, {"name": "additional_info", "type": "uint64[]"}], "name": "tourninfo"}, {"base": "", "fields": [{"name": "id_pplint", "type": "uint64"}, {"name": "tourn_id", "type": "uint64"}, {"name": "person", "type": "name"}, {"name": "money_spent", "type": "asset"}, {"name": "entires_count", "type": "uint32"}, {"name": "used_wizards", "type": "uint64[]"}, {"name": "temp", "type": "uint64"}], "name": "pplintourn"}, {"base": "", "fields": [{"name": "id_wizint", "type": "uint64"}, {"name": "tourn_id", "type": "uint64"}, {"name": "last_owner", "type": "name"}, {"name": "wizard_id", "type": "uint64"}, {"name": "wizard_snapshot", "type": "fight_wizard"}, {"name": "untaken_prize", "type": "asset"}, {"name": "state_id", "type": "uint64"}], "name": "wizintourn"}, {"base": "", "fields": [{"name": "id_wizstate", "type": "uint64"}, {"name": "win_count", "type": "uint16"}, {"name": "wizint_state", "type": "uint16"}], "name": "wiztournstate"}, {"base": "", "fields": [{"name": "id_block", "type": "uint64"}, {"name": "wiz_ids", "type": "uint64[]"}, {"name": "next_block_id", "type": "uint64"}], "name": "tournblock"}, {"base": "", "fields": [{"name": "head_block_id", "type": "uint64"}, {"name": "tail_block_id", "type": "uint64"}, {"name": "wiz_count", "type": "uint64"}, {"name": "level", "type": "uint8"}], "name": "tournlayer"}, {"base": "", "fields": [{"name": "id_struct", "type": "uint64"}, {"name": "tourn_id", "type": "uint64"}, {"name": "layers", "type": "tournlayer[]"}], "name": "tournstrct"}, {"base": "", "fields": [{"name": "id_tourn", "type": "uint64"}, {"name": "looses", "type": "uint64[]"}], "name": "lastloose"}, {"base": "", "fields": [{"name": "id_tourn", "type": "uint64"}, {"name": "battle_state", "type": "uint8"}, {"name": "battle_level", "type": "uint8"}, {"name": "wiz_in_t_1", "type": "uint64"}, {"name": "wiz_in_t_2", "type": "uint64"}], "name": "nexttrnbtl"}, {"base": "", "fields": [{"name": "id_win", "type": "uint64"}, {"name": "tourn_id", "type": "uint64"}, {"name": "wiz_id", "type": "uint64"}, {"name": "win_count", "type": "uint8"}, {"name": "prize", "type": "asset"}, {"name": "memo", "type": "string"}], "name": "wonwiz"}, {"base": "", "fields": [{"name": "seed", "type": "uint64"}], "name": "moveseed"}, {"base": "", "fields": [{"name": "transfId", "type": "uint64"}, {"name": "parent_trans", "type": "checksum256"}], "name": "proctransfer"}, {"base": "", "fields": [{"name": "challenger", "type": "name"}, {"name": "wizardId", "type": "uint64"}, {"name": "target", "type": "name"}, {"name": "targetWizardId", "type": "uint64"}, {"name": "target_stake", "type": "asset"}, {"name": "battle_type", "type": "uint8"}, {"name": "salt", "type": "uint32"}], "name": "regstrfight"}, {"base": "", "fields": [{"name": "info", "type": "fight"}], "name": "handlereg"}, {"base": "", "fields": [{"name": "challenger", "type": "name"}, {"name": "wizardId", "type": "uint64"}, {"name": "target_stake", "type": "asset"}, {"name": "battle_type", "type": "uint8"}], "name": "createarena"}, {"base": "", "fields": [{"name": "fightid", "type": "uint64"}], "name": "acceptfight"}, {"base": "", "fields": [{"name": "fightid", "type": "uint64"}, {"name": "target", "type": "name"}, {"name": "targetWizardId", "type": "uint64"}], "name": "acceptarena"}, {"base": "", "fields": [{"name": "fightid", "type": "uint64"}], "name": "denyfight"}, {"base": "", "fields": [{"name": "fightid", "type": "uint64"}], "name": "cancelfight"}, {"base": "", "fields": [{"name": "attack_type", "type": "uint8"}, {"name": "cur_attack", "type": "uint8"}, {"name": "max_attack", "type": "uint8"}, {"name": "cur_defense_opp", "type": "uint8"}, {"name": "max_defense_opp", "type": "uint8"}, {"name": "cur_evasion_opp", "type": "uint8"}, {"name": "evasion_threshold_opp", "type": "int8"}, {"name": "damage_dealt", "type": "uint8"}], "name": "fight_round_s"}, {"base": "", "fields": [{"name": "firstWizardAttack", "type": "fight_round_s"}, {"name": "secondWizardAttack", "type": "fight_round_s"}], "name": "fight_round"}, {"base": "", "fields": [{"name": "winner", "type": "uint8"}, {"name": "damagedByGodOfLuck", "type": "uint8"}, {"name": "damage1", "type": "uint16"}, {"name": "damage2", "type": "uint16"}, {"name": "MagicGod", "type": "uint8"}, {"name": "rounds", "type": "fight_round[]"}, {"name": "timestamp", "type": "uint64"}], "name": "fight_log_s"}, {"base": "", "fields": [{"name": "tournament_info", "type": "tinfo"}, {"name": "winner", "type": "name"}, {"name": "win_wz_id", "type": "uint64"}, {"name": "loser", "type": "name"}, {"name": "los_wz_id", "type": "uint64"}, {"name": "battle_type", "type": "uint8"}, {"name": "battle_id", "type": "uint64"}, {"name": "p_log", "type": "fight_log_s"}], "name": "payhonor"}, {"base": "", "fields": [{"name": "fighterWizId", "type": "uint64"}], "name": "resetwizcd"}, {"base": "", "fields": [{"name": "fighterWizId", "type": "uint64"}], "name": "checkwizcd"}, {"base": "", "fields": [{"name": "itercount", "type": "uint16"}], "name": "cleanwizcd"}, {"base": "", "fields": [{"name": "user", "type": "name"}, {"name": "wizardId", "type": "uint64"}], "name": "claimhonor"}, {"base": "", "fields": [{"name": "username", "type": "name"}, {"name": "ids", "type": "uint64[]"}], "name": "claimhpsids"}, {"base": "", "fields": [{"name": "username", "type": "name"}, {"name": "start_index", "type": "uint64"}, {"name": "iter_count", "type": "uint64"}], "name": "claimallhps"}, {"base": "", "fields": [{"name": "info", "type": "tourninfo"}], "name": "createtourn"}, {"base": "", "fields": [{"name": "tournid", "type": "uint64"}, {"name": "user", "type": "name"}, {"name": "wizardId", "type": "uint64"}], "name": "entertotourn"}, {"base": "", "fields": [{"name": "tournid", "type": "uint64"}], "name": "updatetourn"}, {"base": "", "fields": [{"name": "tournid", "type": "uint64"}, {"name": "user", "type": "name"}, {"name": "wizardId", "type": "uint64"}], "name": "rmvwizfrmtrn"}, {"base": "", "fields": [{"name": "tournid", "type": "uint64"}], "name": "resdefbattrn"}, {"base": "", "fields": [{"name": "tournid", "type": "uint64"}], "name": "nexttrnbatl"}, {"base": "", "fields": [{"name": "tournid", "type": "uint64"}, {"name": "state", "type": "uint8"}, {"name": "lvl", "type": "uint64"}, {"name": "wizard1Id", "type": "uint64"}, {"name": "wizard2Id", "type": "uint64"}], "name": "preptrnbatl"}, {"base": "", "fields": [{"name": "tournid", "type": "uint64"}, {"name": "startIndex", "type": "uint64"}, {"name": "itercount", "type": "uint16"}, {"name": "state", "type": "uint8"}], "name": "cleartrndata"}, {"base": "", "fields": [{"name": "tournid", "type": "uint64"}, {"name": "wizards_id", "type": "uint64[]"}, {"name": "win_count", "type": "uint16[]"}], "name": "graztrnwinrs"}, {"base": "", "fields": [{"name": "num", "type": "uint64"}, {"name": "possible", "type": "uint8[]"}], "name": "race"}, {"base": "", "fields": [{"name": "num", "type": "uint64"}, {"name": "possible", "type": "uint32[]"}, {"name": "sum", "type": "uint32"}], "name": "ragdist"}, {"base": "", "fields": [{"name": "num", "type": "uint64"}, {"name": "possible", "type": "uint32[]"}, {"name": "bought", "type": "uint32[]"}], "name": "ragshop"}], "tables": [{"index_type": "i64", "key_names": ["id"], "key_types": ["uint64"], "name": "wizards", "type": "wizard"}, {"index_type": "i64", "key_names": ["currid"], "key_types": ["uint64"], "name": "state", "type": "state"}, {"index_type": "i64", "key_names": ["trnsfid"], "key_types": ["uint64"], "name": "nstate", "type": "nstate"}, {"index_type": "i64", "key_names": ["id"], "key_types": ["uint64"], "name": "trainfights", "type": "basefight"}, {"index_type": "i64", "key_names": ["salt", "caller_stake"], "key_types": ["uint32", "asset"], "name": "fights", "type": "fight"}, {"index_type": "i64", "key_names": ["id"], "key_types": ["uint64"], "name": "wzrdsclds", "type": "fighter_cd"}, {"index_type": "i64", "key_names": ["id_tourn"], "key_types": ["uint64"], "name": "tinfo", "type": "tinfo"}, {"index_type": "i64", "key_names": ["id_wiz"], "key_types": ["uint64"], "name": "unclaimhps", "type": "unclaimhp"}, {"index_type": "i64", "key_names": ["id_wiz"], "key_types": ["uint64"], "name": "honorpoints", "type": "honorpoint"}, {"index_type": "i64", "key_names": ["time"], "key_types": ["uint64"], "name": "isserviced", "type": "isserviced"}, {"index_type": "i64", "key_names": ["id_transfer"], "key_types": ["uint64"], "name": "eostransfs", "type": "eostransf"}, {"index_type": "i64", "key_names": ["hash"], "key_types": ["uint64"], "name": "trnshashs", "type": "trnshash"}, {"index_type": "i64", "key_names": ["tournid"], "key_types": ["uint64"], "name": "nextids", "type": "nextid"}, {"index_type": "i64", "key_names": ["id_tourn"], "key_types": ["uint64"], "name": "tournsinfo", "type": "tourninfo"}, {"index_type": "i64", "key_names": ["id_pplint"], "key_types": ["uint64"], "name": "pplintourns", "type": "pplintourn"}, {"index_type": "i64", "key_names": ["id_wizint"], "key_types": ["uint64"], "name": "wizintourns", "type": "wizintourn"}, {"index_type": "i64", "key_names": ["id_wizstate"], "key_types": ["uint64"], "name": "wiztrnstts", "type": "wiztournstate"}, {"index_type": "i64", "key_names": ["id_block"], "key_types": ["uint64"], "name": "tournblocks", "type": "tournblock"}, {"index_type": "i64", "key_names": ["head_block_id"], "key_types": ["uint64"], "name": "tournlayers", "type": "tournlayer"}, {"index_type": "i64", "key_names": ["id_struct"], "key_types": ["uint64"], "name": "tournstrcts", "type": "tournstrct"}, {"index_type": "i64", "key_names": ["id_tourn"], "key_types": ["uint64"], "name": "lastlooses", "type": "lastloose"}, {"index_type": "i64", "key_names": ["id_tourn"], "key_types": ["uint64"], "name": "nexttrnbtls", "type": "nexttrnbtl"}, {"index_type": "i64", "key_names": ["id_win"], "key_types": ["uint64"], "name": "wonwizs", "type": "wonwiz"}, {"index_type": "i64", "key_names": ["num"], "key_types": ["uint64"], "name": "races", "type": "race"}, {"index_type": "i64", "key_names": ["num"], "key_types": ["uint64"], "name": "ragdist", "type": "ragdist"}, {"index_type": "i64", "key_names": ["num"], "key_types": ["uint64"], "name": "shop", "type": "ragshop"}], "types": [], "variants": [], "version": "eosio::abi/1.0"}