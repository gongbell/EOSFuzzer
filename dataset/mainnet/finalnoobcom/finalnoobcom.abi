{"abi_extensions": [], "actions": [{"name": "transfer", "ricardian_contract": "# CONTRACT FOR finalnoob::transfer\n\n## ACTION NAME: transfer\n\n### Parameters\n\nInput parameters:\n\n- `from` (account_name)\n- `to` (account_name)\n- `quantity` (asset)\n- `memo` (string)\n\nImplied parameters:\n\n- `account_name` (sending account)\n- `account_name` (receiving account)\n- `asset` (token or currency to transfer)\n- `string` (memo regarding referrals)\n\n### Intent\n\nINTENT. The intention of the author and the invoker of this contract is to react to the transfer of a quantity of a token or currency to another account. It will grant the invoker a number of noobs for the round.\n\n### Term\n\nTERM. This Contract expires at the conclusion of code execution.\n", "type": "transfer"}, {"name": "withdraw", "ricardian_contract": "# CONTRACT FOR finalnoob::withdraw\n\n## ACTION NAME: withdraw\n\n### Parameters\n\nInput parameters:\n\n- `to` (account_name)\n\nImplied parameters:\n\n- `account_name` (account to send earnings to)\n\n### Intent\n\nINTENT. The intention of the author and the invoker of this contract is to send earnings from pot or dividends to account.\n\n### Term\n\nTERM. This Contract expires at the conclusion of code execution.\n", "type": "withdraw"}, {"name": "create", "ricardian_contract": "# CONTRACT FOR finalnoob::create\n\n## ACTION NAME: create\n\n### Parameters\n\nInput parameters:\n\n- `start` (time_point_sec)\n\nImplied parameters:\n\n- `time_point_sec` (starting time to the sec for round)\n\n### Intent\n\nINTENT. The intention of the author and the invoker of this contract is to create a round of the game. It shall have no other effect.\n\n### Term\n\nTERM. This Contract expires at the conclusion of code execution.\n", "type": "create"}, {"name": "setowner", "ricardian_contract": "# CONTRACT FOR finalnoob::setowner\n\n## ACTION NAME: setowner\n\n### Parameters\n\nInput parameters:\n\n- `new_owner` (account_name)\n\nImplied parameters:\n\n- `account_name` (owner with ability to regain contract control)\n\n### Intent\n\nINTENT. The intention of the author and the invoker of this contract is to set an owner that can regain ownership after a period of time before yielding autonomous control to a contract account.\n\n### Term\n\nTERM. This Contract expires at the conclusion of code execution.\n", "type": "setowner"}, {"name": "yieldcontrol", "ricardian_contract": "# CONTRACT FOR finalnoob::yieldcontrol\n\n## ACTION NAME: yieldcontrol\n\n### Parameters\n\nInput parameters:\n\n- `yield_seconds` (time_point_sec)\n\nImplied parameters:\n\n- `uint32_t` (time in seconds to yield control to contract)\n\n### Intent\n\nINTENT. The intention of the author and the invoker of this contract is to yield autonomy to a contract, disallowing control by any other party until set seconds has passed.\n\n### Term\n\nTERM. This Contract expires at the conclusion of code execution.\n", "type": "yieldcontrol"}, {"name": "extend", "ricardian_contract": "# CONTRACT FOR finalnoob::extend\n\n## ACTION NAME: extend\n\n### Parameters\n\nInput parameters:\n\n- `new_yield_seconds` (uint32_t)\n\nImplied parameters:\n\n- `uint32_t` (number of sec to extend)\n\n### Intent\n\nINTENT. The intention of the author and the invoker of this contract is to extend the period of temporary immutability and contract account autonomy.\n\n### Term\n\nTERM. This Contract expires at the conclusion of code execution.\n", "type": "extend"}, {"name": "regain", "ricardian_contract": "# CONTRACT FOR finalnoob::regain\n\n## ACTION NAME: regain\n\n### Parameters\n\nInput parameters:\n\n- none\n\nImplied parameters:\n\n- none\n\n### Intent\n\nINTENT. The intention of the author and the invoker of this contract is to regain ownership and control from autonomous contract.\n\n### Term\n\nTERM. This Contract expires at the conclusion of code execution.\n", "type": "regain"}], "error_messages": [], "ricardian_clauses": [{"body": "WARRANTY. The invoker of the contract action shall uphold its Obligations under this Contract in a timely and workmanlike manner, using knowledge and recommendations for performing the services which meet generally acceptable standards set forth by EOS.IO Blockchain Block Producers.\n\n", "id": "Warranty"}, {"body": "DEFAULT. The occurrence of any of the following shall constitute a material default under this Contract: \n\n", "id": "Default"}, {"body": "REMEDIES. In addition to any and all other rights a party may have available according to law, if a party defaults by failing to substantially perform any provision, term or condition of this Contract, the other party may terminate the Contract by providing written notice to the defaulting party. This notice shall describe with sufficient detail the nature of the default. The party receiving such notice shall promptly be removed from being a Block Producer and this Contract shall be automatically terminated. \n  \n", "id": "Remedies"}, {"body": "FORCE MAJEURE. If performance of this Contract or any obligation under this Contract is prevented, restricted, or interfered with by causes beyond either party's reasonable control (\"Force Majeure\"), and if the party unable to carry out its obligations gives the other party prompt written notice of such event, then the obligations of the party invoking this provision shall be suspended to the extent necessary by such event. The term Force Majeure shall include, without limitation, acts of God, fire, explosion, vandalism, storm or other similar occurrence, orders or acts of military or civil authority, or by national emergencies, insurrections, riots, or wars, or strikes, lock-outs, work stoppages, or supplier failures. The excused party shall use reasonable efforts under the circumstances to avoid or remove such causes of non-performance and shall proceed to perform with reasonable dispatch whenever such causes are removed or ceased. An act or omission shall be deemed within the reasonable control of a party if committed, omitted, or caused by such party, or its employees, officers, agents, or affiliates. \n  \n", "id": "Force Majeure"}, {"body": "DISPUTE RESOLUTION. Any controversies or disputes arising out of or relating to this Contract will be resolved by binding arbitration under the default rules set forth by the EOS.IO Blockchain. The arbitrator's award will be final, and judgment may be entered upon it by any court having proper jurisdiction. \n  \n", "id": "Dispute Resolution"}, {"body": "ENTIRE AGREEMENT. This Contract contains the entire agreement of the parties, and there are no other promises or conditions in any other agreement whether oral or written concerning the subject matter of this Contract. This Contract supersedes any prior written or oral agreements between the parties. \n\n", "id": "Entire Agreement"}, {"body": "SEVERABILITY. If any provision of this Contract will be held to be invalid or unenforceable for any reason, the remaining provisions will continue to be valid and enforceable. If a court finds that any provision of this Contract is invalid or unenforceable, but that by limiting such provision it would become valid and enforceable, then such provision will be deemed to be written, construed, and enforced as so limited. \n\n", "id": "Severability"}, {"body": "AMENDMENT. This Contract may be modified or amended in writing by mutual agreement between the parties, if the writing is signed by the party obligated under the amendment. \n\n", "id": "Amendment"}, {"body": "GOVERNING LAW. This Contract shall be construed in accordance with the Maxims of Equity. \n\n", "id": "Governing Law"}, {"body": "NOTICE. Any notice or communication required or permitted under this Contract shall be sufficiently given if delivered to a verifiable email address or to such other email address as one party may have publicly furnished in writing, or published on a broadcast contract provided by this blockchain for purposes of providing notices of this type. \n", "id": "Notice"}, {"body": "WAIVER OF CONTRACTUAL RIGHT. The failure of either party to enforce any provision of this Contract shall not be construed as a waiver or limitation of that party's right to subsequently enforce and compel strict compliance with every provision of this Contract. \n\n", "id": "Waiver of Contractual Right"}, {"body": "ARBITRATOR'S FEES TO PREVAILING PARTY. In any action arising hereunder or any separate action pertaining to the validity of this Agreement, both sides shall pay half the initial cost of arbitration, and the prevailing party shall be awarded reasonable arbitrator's fees and costs.\n  \n", "id": "Arbitrator's Fees to Prevailing Party"}, {"body": "CONSTRUCTION AND INTERPRETATION. The rule requiring construction or interpretation against the drafter is waived. The document shall be deemed as if it were drafted by both parties in a mutual effort. \n  \n", "id": "Construction and Interpretation"}, {"body": "This clause describes the authors and contract invokers intent of the contract. An entity automatically agrees to these rules when calling actions of this contract or when transfering funds to this contract through the `eosio.token` contract's actions.\nThe game operates in rounds. A new round begins whenever the `create` action is called.\nThis contract's account is set as the first winner of the round.\nAny EOS account can send EOS through an `eosio.token::transfer` action to the contract account. This will grant an equivalent number of Noobs to the account on the table record of the game, which will grant dividends to the account based on a distribution among all holders of noobs when future noobs are bought.\n\nThe last buyer of a noob when the round timer expires will obtain the pot portion allocated in the table record with corresponding deductions as per code.\n\nThe author disclaims all liability for the operation of the contract. No refunds or compensation will be paid. It's up to the block producers to resolve a dispute that does not conform to the intentions set by this contract's and its actions ricardian clauses.\n", "id": "Game Rules"}], "structs": [{"base": "", "fields": [{"name": "owner", "type": "name"}, {"name": "expiration", "type": "time_point_sec"}], "name": "yield_info"}, {"base": "", "fields": [{"name": "player", "type": "name"}, {"name": "team", "type": "uint8"}, {"name": "ended", "type": "bool"}, {"name": "end", "type": "time_point_sec"}, {"name": "red", "type": "uint64"}, {"name": "blue", "type": "uint64"}, {"name": "key", "type": "uint64"}, {"name": "eos", "type": "uint64"}, {"name": "pot", "type": "uint64"}, {"name": "mask", "type": "uint64"}, {"name": "redmask", "type": "uint64"}, {"name": "bluemask", "type": "uint64"}, {"name": "start", "type": "time_point_sec"}], "name": "st_round"}, {"base": "", "fields": [{"name": "affiliate_name", "type": "name"}, {"name": "aff_vault", "type": "uint64"}, {"name": "pot_vault", "type": "uint64"}, {"name": "red", "type": "uint64"}, {"name": "blue", "type": "uint64"}, {"name": "key", "type": "uint64"}, {"name": "eos", "type": "uint64"}, {"name": "mask", "type": "uint64"}], "name": "st_player"}, {"base": "", "fields": [{"name": "from", "type": "name"}, {"name": "to", "type": "name"}, {"name": "quantity", "type": "asset"}, {"name": "memo", "type": "string"}], "name": "transfer"}, {"base": "", "fields": [{"name": "to", "type": "name"}], "name": "withdraw"}, {"base": "", "fields": [{"name": "start", "type": "time_point_sec"}], "name": "create"}, {"base": "", "fields": [{"name": "new_owner", "type": "name"}], "name": "setowner"}, {"base": "", "fields": [{"name": "yield_seconds", "type": "uint32"}], "name": "yieldcontrol"}, {"base": "", "fields": [{"name": "new_yield_seconds", "type": "uint32"}], "name": "extend"}, {"base": "", "fields": [], "name": "regain"}], "tables": [{"index_type": "i64", "key_names": ["owner"], "key_types": ["name"], "name": "yieldinfo", "type": "yield_info"}, {"index_type": "i64", "key_names": ["player"], "key_types": ["name"], "name": "round", "type": "st_round"}, {"index_type": "i64", "key_names": ["affiliate_name"], "key_types": ["name"], "name": "player", "type": "st_player"}], "types": [], "variants": [], "version": "eosio::abi/1.0"}