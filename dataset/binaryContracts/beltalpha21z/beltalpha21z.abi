{"version": "eosio::abi/1.1", "types": [], "structs": [{"name": "branch", "base": "", "fields": [{"name": "owner", "type": "name"}, {"name": "idmeta", "type": "uint64"}, {"name": "pot", "type": "asset"}]}, {"name": "brnchmeta", "base": "", "fields": [{"name": "owner", "type": "name"}, {"name": "idmeta", "type": "uint64"}, {"name": "meta", "type": "wflbrnchmeta"}]}, {"name": "buytries", "base": "", "fields": [{"name": "account", "type": "name"}]}, {"name": "claimbranch", "base": "", "fields": [{"name": "owner", "type": "name"}, {"name": "idbranch", "type": "uint64"}]}, {"name": "claimchnl", "base": "", "fields": [{"name": "owner", "type": "name"}]}, {"name": "claimred", "base": "", "fields": [{"name": "account", "type": "name"}]}, {"name": "claimsafe", "base": "", "fields": [{"name": "account", "type": "name"}]}, {"name": "claimtake", "base": "", "fields": [{"name": "account", "type": "name"}]}, {"name": "committurn", "base": "", "fields": [{"name": "account", "type": "name"}]}, {"name": "forget", "base": "", "fields": [{"name": "account", "type": "name"}]}, {"name": "gencells", "base": "", "fields": [{"name": "size", "type": "uint8"}]}, {"name": "nextlvl", "base": "", "fields": [{"name": "account", "type": "name"}]}, {"name": "regencells", "base": "", "fields": [{"name": "idlevel", "type": "uint64"}]}, {"name": "revshare", "base": "", "fields": []}, {"name": "rmbranch", "base": "", "fields": [{"name": "idbranch", "type": "uint64"}]}, {"name": "rmbrmeta", "base": "", "fields": [{"name": "owner", "type": "name"}, {"name": "idmeta", "type": "uint64"}]}, {"name": "rmlevel", "base": "", "fields": [{"name": "idlevel", "type": "uint64"}]}, {"name": "rmpchannel", "base": "", "fields": [{"name": "account", "type": "name"}]}, {"name": "rmplayer", "base": "", "fields": [{"name": "account", "type": "name"}]}, {"name": "rmstake", "base": "", "fields": [{"name": "idstake", "type": "uint64"}]}, {"name": "signup", "base": "", "fields": [{"name": "account", "type": "name"}, {"name": "referrer", "type": "name"}]}, {"name": "splitlvl", "base": "", "fields": [{"name": "account", "type": "name"}]}, {"name": "stkaddval", "base": "", "fields": [{"name": "owner", "type": "name"}, {"name": "idbranch", "type": "uint64"}, {"name": "amount", "type": "asset"}]}, {"name": "switchbrnch", "base": "", "fields": [{"name": "account", "type": "name"}, {"name": "idbranch", "type": "uint64"}]}, {"name": "takelvl", "base": "", "fields": [{"name": "account", "type": "name"}]}, {"name": "teleport", "base": "", "fields": [{"name": "account", "type": "name"}, {"name": "idlevel", "type": "uint64"}, {"name": "position", "type": "uint8"}]}, {"name": "tipbranch", "base": "", "fields": [{"name": "idbranch", "type": "uint64"}]}, {"name": "tryturn", "base": "", "fields": [{"name": "account", "type": "name"}]}, {"name": "unjail", "base": "", "fields": [{"name": "account", "type": "name"}]}, {"name": "unlocklvl", "base": "", "fields": [{"name": "account", "type": "name"}, {"name": "idlevel", "type": "uint64"}]}, {"name": "untake", "base": "", "fields": [{"name": "account", "type": "name"}]}, {"name": "wflbranch", "base": "", "fields": [{"name": "id", "type": "uint64"}, {"name": "idrootlvl", "type": "uint64"}, {"name": "idparent", "type": "uint64"}, {"name": "idmeta", "type": "uint64"}, {"name": "generation", "type": "uint64"}, {"name": "winner", "type": "name"}, {"name": "winlevel", "type": "uint64"}, {"name": "winlevgen", "type": "uint64"}, {"name": "totalstake", "type": "asset"}, {"name": "totalrvnue", "type": "asset"}, {"name": "winnerrvnue", "type": "asset"}, {"name": "parentrvnue", "type": "asset"}, {"name": "tipprocessed", "type": "uint64"}, {"name": "potbalance", "type": "asset"}, {"name": "openchildcnt", "type": "uint32"}, {"name": "closed", "type": "uint32"}]}, {"name": "wflbrnchmeta", "base": "", "fields": [{"name": "id", "type": "uint64"}, {"name": "owner", "type": "name"}, {"name": "lvlgreens", "type": "uint16"}, {"name": "lvlreds", "type": "uint16"}, {"name": "startjailed", "type": "bool"}, {"name": "unjlmin", "type": "asset"}, {"name": "unjlrate", "type": "uint8"}, {"name": "buytrymin", "type": "asset"}, {"name": "buytryrate", "type": "uint8"}, {"name": "tkrate", "type": "uint8"}, {"name": "tkintrvl", "type": "uint64"}, {"name": "nxtrate", "type": "uint8"}, {"name": "spltrate", "type": "uint8"}, {"name": "stkmin", "type": "asset"}, {"name": "stkrate", "type": "uint8"}, {"name": "potmin", "type": "asset"}, {"name": "slsrate", "type": "uint8"}, {"name": "winnerrate", "type": "uint8"}, {"name": "url", "type": "string"}, {"name": "name", "type": "string"}, {"name": "maxlvlgen", "type": "uint64"}, {"name": "takemult", "type": "uint8"}, {"name": "unljailmult", "type": "uint8"}, {"name": "buytrymult", "type": "uint8"}]}, {"name": "wflbrquest", "base": "", "fields": [{"name": "id", "type": "uint64"}, {"name": "idbranch", "type": "uint64"}, {"name": "idquest", "type": "uint64"}, {"name": "owner", "type": "name"}]}, {"name": "wflchannel", "base": "", "fields": [{"name": "owner", "type": "name"}, {"name": "height", "type": "uint64"}, {"name": "balance", "type": "asset"}]}, {"name": "wfllevel", "base": "", "fields": [{"name": "id", "type": "uint64"}, {"name": "idparent", "type": "uint64"}, {"name": "idbranch", "type": "uint64"}, {"name": "idchbranch", "type": "uint64"}, {"name": "idmeta", "type": "uint64"}, {"name": "redcells", "type": "uint16"}, {"name": "greencells", "type": "uint16"}, {"name": "locked", "type": "bool"}, {"name": "root", "type": "bool"}, {"name": "generation", "type": "uint64"}, {"name": "potbalance", "type": "asset"}]}, {"name": "wflplayer", "base": "", "fields": [{"name": "account", "type": "name"}, {"name": "channel", "type": "name"}, {"name": "idlevel", "type": "uint64"}, {"name": "activebalance", "type": "asset"}, {"name": "vestingbalance", "type": "asset"}, {"name": "tryposition", "type": "uint8"}, {"name": "currentposition", "type": "uint8"}, {"name": "triesleft", "type": "uint8"}, {"name": "status", "type": "uint8"}, {"name": "resulttimestamp", "type": "uint32"}]}, {"name": "wflquest", "base": "", "fields": [{"name": "id", "type": "uint64"}, {"name": "owner", "type": "name"}, {"name": "balance", "type": "asset"}, {"name": "hashes", "type": "uint64[]"}, {"name": "minprice", "type": "asset"}, {"name": "maxprice", "type": "asset"}, {"name": "apiurl", "type": "string"}]}, {"name": "wflstake", "base": "", "fields": [{"name": "id", "type": "uint64"}, {"name": "idbranch", "type": "uint64"}, {"name": "owner", "type": "name"}, {"name": "stake", "type": "asset"}, {"name": "revenue", "type": "asset"}]}, {"name": "withdraw", "base": "", "fields": [{"name": "from", "type": "name"}, {"name": "to", "type": "name"}, {"name": "amount", "type": "asset"}, {"name": "memo", "type": "string"}]}], "actions": [{"name": "branch", "type": "branch", "ricardian_contract": "### Parameters\nInput parameters:\n\n* `owner` (player name whos stake will be registred first in the ledger of created branch)\n* `idmeta` (ID of branch presets to be used as created branch presets)\n* `pot` (amount to be put in the branch stake for the player created a branch)\n\n### Intent\nINTENT. The intent of the `{{ branch }}` action is to create new root branch taking an earlier created presets as a template.\n\n### Term\nTERM. This Contract expires at the conclusion of code execution."}, {"name": "brnchmeta", "type": "brnchmeta", "ricardian_contract": "### Parameters\nInput parameters:\n\n* `owner` (branch presets owner)\n* `idmeta` (branch presets id)\n* `meta` (branch metadata, or presets)\n\n### Intent\nINTENT. The intent of the `{{ brnchmeta }}` action is to create new or update existing set of branch presets. Branch presets is used to create new branches of levels and to configure parameters and gameplay of these levels.\n\n### Term\nTERM. This Contract expires at the conclusion of code execution."}, {"name": "buytries", "type": "buytries", "ricardian_contract": "### Parameters\nInput parameters:\n\n* `account` (account of the player to be charged for retries count reset. State of the player must be NEXT or SPLIT, retries count must be 0).\n\n### Intent\nINTENT. The intent of the `{{ buytries }}` action to reset retries count while trying to unlock new or split branch:\n\n* if no free unlock retries left, player can buy another set of retries from his active balance and reset retries count\n* price is calculated according to level's branch metadata (`triesrate`, `triesmin`)\n\n### Term\nTERM. This Contract expires at the conclusion of code execution."}, {"name": "claimbranch", "type": "claimbranch", "ricardian_contract": "### Parameters\nInput parameters:\n\n* `owner` (account of the branch stakeholder).\n* `idbranch` (ID of the branch to claim revenue from).\n\n### Intent\nINTENT. The intent of the `{{ claimbranch }}` action is to claim branch stake holder's share of branch revenue.\n\n### Term\nTERM. This Contract expires at the conclusion of code execution."}, {"name": "claimchnl", "type": "claimchnl", "ricardian_contract": "### Parameters\nInput parameters:\n\n* `owner` (account of the sales channel's owner)\n\n### Intent\nINTENT. The intent of the `{{ claimchnl }}` action is to merge sales channel balance (net income from referrals) into channel owner's active balance.\n\n### Term\nTERM. This Contract expires at the conclusion of code execution."}, {"name": "claimred", "type": "claimred", "ricardian_contract": "### Parameters\nInput parameters:\n\n* `account` (account of the player going to claim his current result)\n\n### Intent\nINTENT. The intent of the `{{ claimred }}` action is to commit player's position after turn result \"red cell\" (position player to prev. level's zero cell).\n\n### Term\nTERM. This Contract expires at the conclusion of code execution."}, {"name": "claimsafe", "type": "claimsafe", "ricardian_contract": ""}, {"name": "claimtake", "type": "claimtake", "ricardian_contract": "### Parameters\nInput parameters:\n\n* `account` (account of the player claiming expired TAKE state to be reset).\n\n### Intent\nINTENT. The intent of the `{{ claimtake }}` action is to reset player's TAKE position to SAFE (current level's zero cell) after TAKE level result timestamp expired.\n\n### Term\nTERM. This Contract expires at the conclusion of code execution."}, {"name": "committurn", "type": "committurn", "ricardian_contract": "### Parameters\nInput parameters:\n\n* `account` (account of the player going to commit his current result)\n\n### Intent\nINTENT. The intent of the `{{ committurn }}` action is to commit position change in current level.\n\n### Term\nTERM. This Contract expires at the conclusion of code execution."}, {"name": "forget", "type": "forget", "ricardian_contract": "### Parameters\nInput parameters:\n\n* `account` (player name)\n\n### Intent\nINTENT. The intent of the `{{ forget }}` action is to remove player's account registration record from contract's ledger. This action can only be called once.\n\n### Term\nTERM. This Contract expires at the conclusion of code execution."}, {"name": "gencells", "type": "gencells", "ricardian_contract": ""}, {"name": "nextlvl", "type": "nextlvl", "ricardian_contract": "### Parameters\nInput parameters:\n\n* `account` (account of the player going to extend current branch with new level)\n\n### Intent\nINTENT. The intent of the `{{ nextlvl }}` action is to position player to the next level. If nex level does not yet exists - new level will be initialised in current branch:\n\n* split pot according to level's branch metadata(`nxtrate`);\n* make the player a branch winner;\n* as new level is locked when created, the winner has 3 tries to unlock it;\n* if no free unlock retries left, player can buy another set of retries from his active balance and reset retries count.\n\n### Term\nTERM. This Contract expires at the conclusion of code execution."}, {"name": "regencells", "type": "regencells", "ricardian_contract": ""}, {"name": "revshare", "type": "revshare", "ricardian_contract": "### Parameters\nInput parameters: no input parameters.\n\n### Intent\nINTENT. The intent of the `{{ revshare }}` action is to initiate revenue share allocation processing for all unprocessed branchches. One pass of the action will process one hierarchy level of branch trees at a time. Action can be called by any account or script. Contract pays all RAM in course of the action execution (actually, only deferred actions are recreated during this action).\n\n### Term\nTERM. This Contract expires at the conclusion of code execution."}, {"name": "rmbranch", "type": "rmbranch", "ricardian_contract": ""}, {"name": "rmbrmeta", "type": "rmbrmeta", "ricardian_contract": "### Parameters\nInput parameters:\n\n* `owner` (branch presets owner)\n* `idmeta` (ID of branch presets to be deleted)\n\n### Intent\nINTENT. The intent of the `{{ rmbrmeta }}` action is to remove the set of branch presets with specified ID from the contract storage.\n\n### Term\nTERM. This Contract expires at the conclusion of code execution."}, {"name": "rmlevel", "type": "rmlevel", "ricardian_contract": ""}, {"name": "rmpchannel", "type": "rmpchannel", "ricardian_contract": ""}, {"name": "rmplayer", "type": "rmplayer", "ricardian_contract": ""}, {"name": "rmstake", "type": "rmstake", "ricardian_contract": ""}, {"name": "signup", "type": "signup", "ricardian_contract": "### Parameters\nInput parameters:\n\n* `account` (player name)\n* `referrer` (referrer name)\n\n### Intent\nINTENT. The intent of the `{{ signup }}` action is to register account as a game player. Account being registred pays for the RAM for the game registration record. This action can only be called once.\n\n### Term\nTERM. This Contract expires at the conclusion of code execution."}, {"name": "splitlvl", "type": "splitlvl", "ricardian_contract": "### Parameters\nInput parameters:\n\n* `account` (account of the player initiating branch split from current level. State of the player must be GREEN).\n\n### Intent\nINTENT. The intent of the `{{ splitlvl }}` action is to:\n\n* make subbranch with locked root level\n* split level's pot according to level's branch metadata (`spltrate`, `stakemin`)\n* as new level is locked, splitter have 3 tries to unlock it using `unlocklvl` action and become split branch stakeholder. If no luck - additional tries can be bought by calling `buytries` action.\n\n### Term\nTERM. This Contract expires at the conclusion of code execution."}, {"name": "stkaddval", "type": "stkaddval", "ricardian_contract": "### Parameters\nInput parameters:\n\n* `owner` (account of the player going to stake on the branch)\n* `idbranch` (ID of the branch to stake on)\n* `amount` (amount to be moved from owner's active balance to branch stake)\n\n### Intent\nINTENT. The intent of the `{{ stkaddval }}` action is to increase volume of branch starting pot and to add owner's funds to the branch stake:\n\n* cut amount from owner's active balance;\n* register amount as owner's stake in specified branch;\n* if branch already has a root lvl, add amount to its pot.\n\nContract account will cut 3% of each amount put on root branch (contract account get 3% in each root branch).\n\n### Term\nTERM. This Contract expires at the conclusion of code execution."}, {"name": "switchbrnch", "type": "switchbrnch", "ricardian_contract": "### Parameters\nInput parameters:\n\n* `account` (player account to be moved to a selected root branch)\n* `idbranch` (ID of root branch to move a player to, or zer0 to exit current game)\n\n### Intent\nINTENT. The intent of the `{{ switchbrnch }}` action is to select root branch to play on. If succeed, the root level of the selected root branch will become a current level of a player. If zero passed as idbranch, the player returns to initial state without current branch/level selected.\n\n### Term\nTERM. This Contract expires at the conclusion of code execution."}, {"name": "takelvl", "type": "takelvl", "ricardian_contract": "### Parameters\nInput parameters:\n\n* `account` (account of the player decided take his reward).\n\n### Intent\nINTENT. The intent of the `{{ takelvl }}` action is to split level's pot according to level's branch metadata (`tkrate`) and reward player (vesting balance update). Player wait untill the end of `tkintrvl` set with level result upon `takelvl` action is called. Player calls `claimtake` action to move further after `tkintrvl` expires. After `takelvl` player positioned in current level, zero cell, and can repeat his trial of the level.\n\n### Term\nTERM. This Contract expires at the conclusion of code execution."}, {"name": "teleport", "type": "teleport", "ricardian_contract": ""}, {"name": "tipbranch", "type": "tipbranch", "ricardian_contract": "### Parameters\nInput parameters:\n\n* `idbranch` (ID of the branch to be processed).\n\n### Intent\nINTENT. The intent of the `{{ tipbranch }}` action is to process revenue share on branch, called as deferred action.\n\n### Term\nTERM. This Contract expires at the conclusion of code execution."}, {"name": "tryturn", "type": "tryturn", "ricardian_contract": "### Parameters\nInput parameters:\n\n* `account` (account of the player going to use his try)\n\n### Intent\nINTENT. The intent of the `{{ tryturn }}` action is to use try to change position in current level from safe to green. last try will change position automatically.\n\n### Term\nTERM. This Contract expires at the conclusion of code execution."}, {"name": "unjail", "type": "unjail", "ricardian_contract": "### Parameters\nInput parameters:\n\n* `account` (account of the player going to make payment for un-jail)\n\n### Intent\nINTENT. The intent of the `{{ unjail }}` action is to reset player's position and retries count in current level's zero cell for a certain payment:\n\n* payment rules are defined in the branch metadata of current level (see table [brnchmeta] of the game contract);\n* payment is calculated as ([current level's pot]*[unjlrate]/100);\n* payment can't be less then ([unjlmin]).\n\n### Term\nTERM. This Contract expires at the conclusion of code execution."}, {"name": "unlocklvl", "type": "unlocklvl", "ricardian_contract": "### Parameters\nInput parameters:\n\n* `account` (account to unlock the level with - a pretender)\n* `idlevel` (ID of the level to be unlocked)\n\n### Intent\nINTENT. The intent of the `{{ unlocklvl }}` action is to generate cells for a given level and mark level unlocked if compatible green/red set was found by the pretender. Rules:\n\n* if a level being unlocked is the Root level of Root branch, pretender must own stake in the branch\n* if a level being unlocked is Next level or Root level of Split branch, pretender must stand in the previous level, be in NEXT or SPLIT state, and retries count must be > 0. Additional tries are bought by calling `buytries` action.\n* upon successful level unlock, NEXT player becomes current branch winner, while SPLIIT player becomes a stakeholder of split branch with stake equal to unlocked level's pot.\n\n### Term\nTERM. This Contract expires at the conclusion of code execution."}, {"name": "untake", "type": "untake", "ricardian_contract": "### Parameters\nInput parameters:\n\n* `account` (account of the player cancelling TAKE state and returning vested funds back to level's pot).\n\n### Intent\nINTENT. The intent of the `{{ untake }}` action is to return vested balance to level's pot and set player's state back to GREEN.\n\n### Term\nTERM. This Contract expires at the conclusion of code execution."}, {"name": "withdraw", "type": "withdraw", "ricardian_contract": "### Parameters\nInput parameters:\n\n* `from` (player name to withdraw from)\n* `to` (account name to transfer asset to)\n* `amount` (amount to be withdrawn)\n* `memo` (memo for the transfer)\n\n### Intent\nINTENT. The intent of the `{{ withdraw }}` action is to withdraw player's funds from contract's account.\n\n### Term\nTERM. This Contract expires at the conclusion of code execution."}], "tables": [{"name": "branches", "index_type": "i64", "key_names": [], "key_types": [], "type": "wflbranch"}, {"name": "brnchmeta", "index_type": "i64", "key_names": [], "key_types": [], "type": "wflbrnchmeta"}, {"name": "brquest", "index_type": "i64", "key_names": [], "key_types": [], "type": "wflbrquest"}, {"name": "channels", "index_type": "i64", "key_names": [], "key_types": [], "type": "wflchannel"}, {"name": "levels", "index_type": "i64", "key_names": [], "key_types": [], "type": "wfllevel"}, {"name": "players", "index_type": "i64", "key_names": [], "key_types": [], "type": "wflplayer"}, {"name": "quests", "index_type": "i64", "key_names": [], "key_types": [], "type": "wflquest"}, {"name": "stakes", "index_type": "i64", "key_names": [], "key_types": [], "type": "wflstake"}], "ricardian_clauses": [{"id": "Warranty", "body": "The invoker of the contract action shall uphold its Obligations under\nthis Contract in a timely and workmanlike manner, using knowledge and\nrecommendations for EOS.IO account holders."}, {"id": "Dispute Resolution", "body": "Any controversies or disputes arising out of or relating to this\nContract will be resolved by binding arbitration under the default rules\nset forth by the EOS.IO Blockchain. The arbitrator's award will be\nfinal, and judgment may be entered upon it by any court having proper\njurisdiction."}, {"id": "Entire Agreement", "body": "This Contract contains the entire agreement of the parties, and there\nare no other promises or conditions in any other agreement whether oral\nor written concerning the subject matter of this Contract. This Contract\nsupersedes any prior written or oral agreements between the parties."}, {"id": "Severability", "body": "If any provision of this Contract will be held to be invalid or\nunenforceable for any reason, the remaining provisions will continue to\nbe valid and enforceable. If a court finds that any provision of this\nContract is invalid or unenforceable, but that by limiting such\nprovision it would become valid and enforceable, then such provision\nwill be deemed to be written, construed, and enforced as so limited."}, {"id": "Amendment", "body": "This Contract may be modified or amended in writing by mutual agreement\nbetween the parties, if the writing is signed by the party obligated\nunder the amendment."}, {"id": "Governing Law", "body": "This Contract shall be construed in accordance with the Maxims of\nEquity."}, {"id": "Notice", "body": "Any notice or communication required or permitted under this Contract\nshall be sufficiently given if published as part of the source code."}, {"id": "Waiver of Contractual Right", "body": "The failure of either party to enforce any provision of this Contract\nshall not be construed as a waiver or limitation of that party's right\nto subsequently enforce and compel strict compliance with every\nprovision of this Contract."}, {"id": "Arbitrator's Fees to Prevailing Party", "body": "In any action arising hereunder or any separate action pertaining to the\nvalidity of this Agreement, both sides shall pay half the initial cost\nof arbitration, and the prevailing party shall be awarded reasonable\narbitrator's fees and costs."}, {"id": "Construction and Interpretation", "body": "The rule requiring construction or interpretation against the drafter is\nwaived. The document shall be deemed as if it were drafted by both\nparties in a mutual effort."}, {"id": "In Witness Whereof", "body": "the parties hereto have caused this Agreement to be executed by\nthemselves or their duly authorized representatives as of the date of\nexecution, and authorized as proven by the cryptographic signature on\nthe transaction that invokes this contract."}], "error_messages": [], "abi_extensions": [], "variants": []}